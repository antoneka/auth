// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mocks

//go:generate minimock -i github.com/antoneka/auth/internal/storage/postgres.LogStorage -o log_storage_minimock.go -n LogStorageMock -p mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/antoneka/auth/internal/model"
	"github.com/gojuno/minimock/v3"
)

// LogStorageMock implements postgres.LogStorage
type LogStorageMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcLog          func(ctx context.Context, log *model.LogUser) (err error)
	inspectFuncLog   func(ctx context.Context, log *model.LogUser)
	afterLogCounter  uint64
	beforeLogCounter uint64
	LogMock          mLogStorageMockLog
}

// NewLogStorageMock returns a mock for postgres.LogStorage
func NewLogStorageMock(t minimock.Tester) *LogStorageMock {
	m := &LogStorageMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.LogMock = mLogStorageMockLog{mock: m}
	m.LogMock.callArgs = []*LogStorageMockLogParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mLogStorageMockLog struct {
	optional           bool
	mock               *LogStorageMock
	defaultExpectation *LogStorageMockLogExpectation
	expectations       []*LogStorageMockLogExpectation

	callArgs []*LogStorageMockLogParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// LogStorageMockLogExpectation specifies expectation struct of the LogStorage.Log
type LogStorageMockLogExpectation struct {
	mock      *LogStorageMock
	params    *LogStorageMockLogParams
	paramPtrs *LogStorageMockLogParamPtrs
	results   *LogStorageMockLogResults
	Counter   uint64
}

// LogStorageMockLogParams contains parameters of the LogStorage.Log
type LogStorageMockLogParams struct {
	ctx context.Context
	log *model.LogUser
}

// LogStorageMockLogParamPtrs contains pointers to parameters of the LogStorage.Log
type LogStorageMockLogParamPtrs struct {
	ctx *context.Context
	log **model.LogUser
}

// LogStorageMockLogResults contains results of the LogStorage.Log
type LogStorageMockLogResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmLog *mLogStorageMockLog) Optional() *mLogStorageMockLog {
	mmLog.optional = true
	return mmLog
}

// Expect sets up expected params for LogStorage.Log
func (mmLog *mLogStorageMockLog) Expect(ctx context.Context, log *model.LogUser) *mLogStorageMockLog {
	if mmLog.mock.funcLog != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Set")
	}

	if mmLog.defaultExpectation == nil {
		mmLog.defaultExpectation = &LogStorageMockLogExpectation{}
	}

	if mmLog.defaultExpectation.paramPtrs != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by ExpectParams functions")
	}

	mmLog.defaultExpectation.params = &LogStorageMockLogParams{ctx, log}
	for _, e := range mmLog.expectations {
		if minimock.Equal(e.params, mmLog.defaultExpectation.params) {
			mmLog.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmLog.defaultExpectation.params)
		}
	}

	return mmLog
}

// ExpectCtxParam1 sets up expected param ctx for LogStorage.Log
func (mmLog *mLogStorageMockLog) ExpectCtxParam1(ctx context.Context) *mLogStorageMockLog {
	if mmLog.mock.funcLog != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Set")
	}

	if mmLog.defaultExpectation == nil {
		mmLog.defaultExpectation = &LogStorageMockLogExpectation{}
	}

	if mmLog.defaultExpectation.params != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Expect")
	}

	if mmLog.defaultExpectation.paramPtrs == nil {
		mmLog.defaultExpectation.paramPtrs = &LogStorageMockLogParamPtrs{}
	}
	mmLog.defaultExpectation.paramPtrs.ctx = &ctx

	return mmLog
}

// ExpectLogParam2 sets up expected param log for LogStorage.Log
func (mmLog *mLogStorageMockLog) ExpectLogParam2(log *model.LogUser) *mLogStorageMockLog {
	if mmLog.mock.funcLog != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Set")
	}

	if mmLog.defaultExpectation == nil {
		mmLog.defaultExpectation = &LogStorageMockLogExpectation{}
	}

	if mmLog.defaultExpectation.params != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Expect")
	}

	if mmLog.defaultExpectation.paramPtrs == nil {
		mmLog.defaultExpectation.paramPtrs = &LogStorageMockLogParamPtrs{}
	}
	mmLog.defaultExpectation.paramPtrs.log = &log

	return mmLog
}

// Inspect accepts an inspector function that has same arguments as the LogStorage.Log
func (mmLog *mLogStorageMockLog) Inspect(f func(ctx context.Context, log *model.LogUser)) *mLogStorageMockLog {
	if mmLog.mock.inspectFuncLog != nil {
		mmLog.mock.t.Fatalf("Inspect function is already set for LogStorageMock.Log")
	}

	mmLog.mock.inspectFuncLog = f

	return mmLog
}

// Return sets up results that will be returned by LogStorage.Log
func (mmLog *mLogStorageMockLog) Return(err error) *LogStorageMock {
	if mmLog.mock.funcLog != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Set")
	}

	if mmLog.defaultExpectation == nil {
		mmLog.defaultExpectation = &LogStorageMockLogExpectation{mock: mmLog.mock}
	}
	mmLog.defaultExpectation.results = &LogStorageMockLogResults{err}
	return mmLog.mock
}

// Set uses given function f to mock the LogStorage.Log method
func (mmLog *mLogStorageMockLog) Set(f func(ctx context.Context, log *model.LogUser) (err error)) *LogStorageMock {
	if mmLog.defaultExpectation != nil {
		mmLog.mock.t.Fatalf("Default expectation is already set for the LogStorage.Log method")
	}

	if len(mmLog.expectations) > 0 {
		mmLog.mock.t.Fatalf("Some expectations are already set for the LogStorage.Log method")
	}

	mmLog.mock.funcLog = f
	return mmLog.mock
}

// When sets expectation for the LogStorage.Log which will trigger the result defined by the following
// Then helper
func (mmLog *mLogStorageMockLog) When(ctx context.Context, log *model.LogUser) *LogStorageMockLogExpectation {
	if mmLog.mock.funcLog != nil {
		mmLog.mock.t.Fatalf("LogStorageMock.Log mock is already set by Set")
	}

	expectation := &LogStorageMockLogExpectation{
		mock:   mmLog.mock,
		params: &LogStorageMockLogParams{ctx, log},
	}
	mmLog.expectations = append(mmLog.expectations, expectation)
	return expectation
}

// Then sets up LogStorage.Log return parameters for the expectation previously defined by the When method
func (e *LogStorageMockLogExpectation) Then(err error) *LogStorageMock {
	e.results = &LogStorageMockLogResults{err}
	return e.mock
}

// Times sets number of times LogStorage.Log should be invoked
func (mmLog *mLogStorageMockLog) Times(n uint64) *mLogStorageMockLog {
	if n == 0 {
		mmLog.mock.t.Fatalf("Times of LogStorageMock.Log mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmLog.expectedInvocations, n)
	return mmLog
}

func (mmLog *mLogStorageMockLog) invocationsDone() bool {
	if len(mmLog.expectations) == 0 && mmLog.defaultExpectation == nil && mmLog.mock.funcLog == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmLog.mock.afterLogCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmLog.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Log implements postgres.LogStorage
func (mmLog *LogStorageMock) Log(ctx context.Context, log *model.LogUser) (err error) {
	mm_atomic.AddUint64(&mmLog.beforeLogCounter, 1)
	defer mm_atomic.AddUint64(&mmLog.afterLogCounter, 1)

	if mmLog.inspectFuncLog != nil {
		mmLog.inspectFuncLog(ctx, log)
	}

	mm_params := LogStorageMockLogParams{ctx, log}

	// Record call args
	mmLog.LogMock.mutex.Lock()
	mmLog.LogMock.callArgs = append(mmLog.LogMock.callArgs, &mm_params)
	mmLog.LogMock.mutex.Unlock()

	for _, e := range mmLog.LogMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmLog.LogMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmLog.LogMock.defaultExpectation.Counter, 1)
		mm_want := mmLog.LogMock.defaultExpectation.params
		mm_want_ptrs := mmLog.LogMock.defaultExpectation.paramPtrs

		mm_got := LogStorageMockLogParams{ctx, log}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmLog.t.Errorf("LogStorageMock.Log got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.log != nil && !minimock.Equal(*mm_want_ptrs.log, mm_got.log) {
				mmLog.t.Errorf("LogStorageMock.Log got unexpected parameter log, want: %#v, got: %#v%s\n", *mm_want_ptrs.log, mm_got.log, minimock.Diff(*mm_want_ptrs.log, mm_got.log))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmLog.t.Errorf("LogStorageMock.Log got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmLog.LogMock.defaultExpectation.results
		if mm_results == nil {
			mmLog.t.Fatal("No results are set for the LogStorageMock.Log")
		}
		return (*mm_results).err
	}
	if mmLog.funcLog != nil {
		return mmLog.funcLog(ctx, log)
	}
	mmLog.t.Fatalf("Unexpected call to LogStorageMock.Log. %v %v", ctx, log)
	return
}

// LogAfterCounter returns a count of finished LogStorageMock.Log invocations
func (mmLog *LogStorageMock) LogAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLog.afterLogCounter)
}

// LogBeforeCounter returns a count of LogStorageMock.Log invocations
func (mmLog *LogStorageMock) LogBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmLog.beforeLogCounter)
}

// Calls returns a list of arguments used in each call to LogStorageMock.Log.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmLog *mLogStorageMockLog) Calls() []*LogStorageMockLogParams {
	mmLog.mutex.RLock()

	argCopy := make([]*LogStorageMockLogParams, len(mmLog.callArgs))
	copy(argCopy, mmLog.callArgs)

	mmLog.mutex.RUnlock()

	return argCopy
}

// MinimockLogDone returns true if the count of the Log invocations corresponds
// the number of defined expectations
func (m *LogStorageMock) MinimockLogDone() bool {
	if m.LogMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.LogMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.LogMock.invocationsDone()
}

// MinimockLogInspect logs each unmet expectation
func (m *LogStorageMock) MinimockLogInspect() {
	for _, e := range m.LogMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to LogStorageMock.Log with params: %#v", *e.params)
		}
	}

	afterLogCounter := mm_atomic.LoadUint64(&m.afterLogCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.LogMock.defaultExpectation != nil && afterLogCounter < 1 {
		if m.LogMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to LogStorageMock.Log")
		} else {
			m.t.Errorf("Expected call to LogStorageMock.Log with params: %#v", *m.LogMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcLog != nil && afterLogCounter < 1 {
		m.t.Error("Expected call to LogStorageMock.Log")
	}

	if !m.LogMock.invocationsDone() && afterLogCounter > 0 {
		m.t.Errorf("Expected %d calls to LogStorageMock.Log but found %d calls",
			mm_atomic.LoadUint64(&m.LogMock.expectedInvocations), afterLogCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *LogStorageMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockLogInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *LogStorageMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *LogStorageMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockLogDone()
}
